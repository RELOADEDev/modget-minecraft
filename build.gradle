plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
archivesBaseName = project.archives_base_name
group = project.maven_group

configurations {
    includeTransitive {
        transitive = true
    }
}

repositories {
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://mvnrepository.com/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "NucleoidMC"
        url = "https://maven.nucleoid.xyz/"
    }
    mavenCentral()
}


dependencies {
    minecraft "com.mojang:minecraft:1.18.1"
    mappings "net.fabricmc:yarn:1.18.1+build.1:v2"
    modImplementation "net.fabricmc:fabric-loader:0.12.9"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.44.0+1.18"
    modRuntimeOnly "fr.catcore:server-translations-api:1.4.8+1.18-pre1"
    modImplementation "com.terraformersmc:modmenu:3.0.0"
    modApi("me.shedaniel.cloth:cloth-config-fabric:6.1.48") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include implementation("com.github.ReviversMC.modget-manifest-api:compat:0.2.1")
    include implementation("com.github.ReviversMC.modget-manifest-api:spec3:0.2.1")
    include implementation("com.github.ReviversMC.modget-manifest-api:spec4:0.2.1")
    include implementation("com.fasterxml.jackson.core:jackson-core:2.13.0")
    include implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0")
    include implementation("com.fasterxml.jackson.core:jackson-databind:2.13.2")
    include implementation("com.fasterxml.jackson.core:jackson-annotations:2.13.0")
    include implementation("org.yaml:snakeyaml:1.30")
    include implementation("com.github.ReviversMC:modget-lib:3.0.0")
    include implementation("org.apache.commons:commons-text:1.9")
    compileOnly "com.github.spotbugs:spotbugs:4.5.2"
}

project.afterEvaluate {
    configurations.includeTransitive.incoming.resolutionResult.allComponents {
        if (it.id instanceof ModuleComponentIdentifier) {
            def that = it
            dependencies {
                include group: that.id.getGroup(), name: that.id.getModule(), version: that.id.getVersion()
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand project.properties
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
